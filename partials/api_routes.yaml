openapi: "3.0.3"
info:
  title: Unofficial Lemmy OpenAPI Documentation
  version: v0.19.11
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html#license-text
  x-logo:
    url: https://raw.githubusercontent.com/LemmyNet/lemmy-ui/main/src/assets/icons/favicon.svg
    altText: Lemmy Icon
    href: https://github.com/MV-GH/lemmy_openapi_spec
  contact:
    url: https://github.com/MV-GH/lemmy_openapi_spec
servers:
  - url: https://lemmy.ml/api/v3
  - url: https://enterprise.lemmy.ml/api/v3
  - url: https://ds9.lemmy.ml/api/v3
  - url: https://voyager.lemmy.ml/api/v3

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth
  schemas:
    errorResponseRegistration:
      properties:
        error:
          type: string
          enum:
            - registration_closed
            - email_required
            - registration_application_answer_required
            - passwords_do_not_match
            - captcha_incorrect
            - email_already_exists
            - user_already_exists
    errorResponseLogin:
      properties:
        error:
          type: string
          enum:
            - incorrect_login
            - email_not_verified
            - registration_denied
            - registration_application_pending # Not sure about these two, I found references to both, maybe one was only used in older version
            - registration_application_is_pending
            - missing_totp_token
            - incorrect_totp_token
      # TODO: add the schema, is not exported currently
    ExportUserSettingsResponse:
      type: string
    ImportUserSettings:
      type: string

security:
  - bearerAuth: []
  - cookieAuth: []

paths:
  /site:
    get:
      summary: Gets the site, and your user data.
      tags:
        - Site
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetSiteResponse'
    post:
      tags:
        - Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateSite'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/SiteResponse'
      summary: Create your site.
    put:
      summary: Edit your site.
      tags:
        - Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditSite'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/SiteResponse'
  /modlog:
    get:
      summary: Get the modlog.
      tags:
        - Miscellaneous
      parameters:
        - name: GetModlog
          explode: true
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetModlog'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetModlogResponse'

  /search:
    get:
      tags:
        - Miscellaneous
      summary: Search lemmy.
      parameters:
        - name: Search
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/Search'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/SearchResponse'

  /resolve_object:
    get:
      tags:
        - Miscellaneous
      parameters:
        - name: ResolveObject
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ResolveObject'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ResolveObjectResponse'
      summary: Fetch a non-local / federated object.
  /community:
    get:
      tags:
        - Community
      parameters:
        - name: GetCommunity
          explode: true
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetCommunityResponse'
      summary: Get / fetch a community.
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: Create a new community.
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: Edit a community.
  /community/hide:
    put:
      tags:
        - Community
        - Admin
      summary: "Hide a community from public / \"All\" view. Admins only."
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/HideCommunity'
      responses:
        "200":
          description: OK
  /community/list:
    get:
      tags:
        - Community
      parameters:
        - name: ListCommunities
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/ListCommunities'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListCommunitiesResponse'
      summary: List communities, with various filters.
  /community/follow:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/FollowCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: Follow / subscribe to a community.
  /community/block:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BlockCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BlockCommunityResponse'
      summary: Block a community.
  /community/delete:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: Delete a community.

  /community/remove:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemoveCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: A moderator remove for a community.
  /community/transfer:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/TransferCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
      summary: Transfer your community to an existing moderator.
  /community/ban_user:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BanFromCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BanFromCommunityResponse'
      summary: Ban a user from a community.
  /community/mod:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/AddModToCommunity'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/AddModToCommunityResponse'
      summary: Add a moderator to your community.
  /federated_instances:
    get:
      tags:
        - Miscellaneous
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetFederatedInstancesResponse'
      summary: Fetch federated instances.
  /post:
    get:
      tags:
        - Post
      parameters:
        - name: GetPost
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetPost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPostResponse'
      summary: Get / fetch a post.
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditPost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: Edit a post.

    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: Create a post.
  /post/list:
    get:
      tags:
        - Post
      parameters:
        - name: GetPosts
          explode: true
          in: query
          schema:
            $ref: "components.yaml#/components/schemas/GetPosts"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPostsResponse'
      summary: Get / fetch posts, with various filters.
  /post/delete:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeletePost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: Delete a post.
  /post/remove:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemovePost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: A moderator remove for a post.
  /post/mark_as_read:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkPostAsRead'
      responses:
        200:
          description: OK
      summary: Mark a post as read.
  /post/lock:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/LockPost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: A moderator can lock a post ( IE disable new comments ).
  /post/feature:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/FeaturePost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: A moderator can feature a community post ( IE stick it to the top of a
        community ).
  /post/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePostLike'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: Like / vote on a post.
  /post/save:
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/SavePost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
      summary: Save a post.
  /post/report:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePostReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostReportResponse'
      summary: Report a post.
  /post/report/resolve:
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolvePostReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostReportResponse'
      summary: Resolve a post report. Only a mod can do this.
  /post/report/list:
    get:
      tags:
        - Post
      parameters:
        - name: ListPostReports
          explode: true
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListPostReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListPostReportsResponse'
      summary: List post reports.
  /post/site_metadata:
    get:
      tags:
        - Post
      parameters:
        - name: GetSiteMetadata
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetSiteMetadata'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetSiteMetadataResponse'
      summary: Fetch metadata for any given site.

  /comment:
    get:
      tags:
        - Comment
      parameters:
        - name: GetComment
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Get / fetch comment.
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Create a comment.
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Edit a comment.
  /comment/list:
    get:
      tags:
        - Comment
      parameters:
        - in: query
          name: GetComments
          schema:
            $ref: 'components.yaml#/components/schemas/GetComments'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetCommentsResponse'
      summary: Get / fetch comments.

  /comment/delete:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Delete a comment.
  /comment/remove:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemoveComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: A moderator remove for a comment.
  /comment/mark_as_read:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkCommentReplyAsRead'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReplyResponse'
      summary: Mark a comment as read.
  /comment/distinguish:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DistinguishComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Distinguishes a comment (speak as moderator)
  /comment/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommentLike'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Like / vote on a comment.
  /comment/save:
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/SaveComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
      summary: Save a comment.
  /comment/report:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommentReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReportResponse'
      summary: Report a comment.
  /comment/report/resolve:
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolveCommentReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReportResponse'
      summary: Resolve a comment report. Only a mod can do this.
  /comment/report/list:
    get:
      tags:
        - Comment
      parameters:
        - name: ListCommentReports
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListCommentReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListCommentReportsResponse'
      summary: List comment reports.

  /private_message:
    put:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditPrivateMessage'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
      summary: Edit a private message.

    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePrivateMessage'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
      summary: Create a private message.
  /private_message/list:
    get:
      tags:
        - PrivateMessage
      parameters:
        - in: query
          name: GetPrivateMessages
          schema:
            $ref: 'components.yaml#/components/schemas/GetPrivateMessages'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessagesResponse'
      summary: Get / fetch private messages.
  /private_message/delete:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeletePrivateMessage'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
      summary: Delete a private message.
  /private_message/mark_as_read:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkPrivateMessageAsRead'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
      summary: Mark a private message as read.
  /private_message/report:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePrivateMessageReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageReportResponse'
      summary: Create a report for a private message.
  /private_message/report/resolve:
    put:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolvePrivateMessageReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageReportResponse'
      summary: Resolve a report for a private message.
  /private_message/report/list:
    get:
      tags:
        - PrivateMessage
      parameters:
        - name: ListPrivateMessageReports
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/ListPrivateMessageReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListPrivateMessageReportsResponse'
      summary: List private message reports.
  /user:
    get:
      tags:
        - User
      parameters:
        - name: GetPersonDetails
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetPersonDetails'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPersonDetailsResponse'
      summary: Get the details for a person.
  /user/register:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/Register'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/LoginResponse'
                description: JWT will be empty if registration requires email verification or
                  application approval
        400:
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseRegistration'
      summary: Register a new user.

  /user/get_captcha:
    get:
      tags:
        - User
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetCaptchaResponse'
      summary: Fetch a Captcha.
  /user/mention:
    get:
      tags:
        - User
      parameters:
        - name: GetPersonMentions
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetPersonMentions'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPersonMentionsResponse'
      summary: Get mentions for your user.
  /user/mention/mark_as_read:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkPersonMentionAsRead'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PersonMentionResponse'
      summary: Mark a person mention as read.
  /user/replies:
    get:
      tags:
        - User
      parameters:
        - name: GetReplies
          in: query
          explode: true
          schema:
            $ref: 'components.yaml#/components/schemas/GetReplies'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetRepliesResponse'
      summary: Get comment replies.
  /user/ban:
    post:
      tags:
        - User
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BanPerson'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BanPersonResponse'
      summary: Ban a person from your site.
  /user/banned:
    get:
      tags:
        - User
        - Admin
      operationId: getBannedPersons
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BannedPersonsResponse'
      summary: Get a list of banned users
  /user/block:
    post:
      tags:
        - User
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BlockPerson'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BlockPersonResponse'
      summary: Block a person.
  /user/login:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/Login'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/LoginResponse'
        400:
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseLogin'
      summary: Log into lemmy.
  /user/delete_account:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteAccount'
      responses:
        200:
          description: OK
      summary: Delete your account.
  /user/password_reset:
    post:
      tags:
        - User
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PasswordReset'
      responses:
        200:
          description: OK
      summary: Reset your password.
  /user/password_change:
    post:
      tags:
        - User
      operationId: changePasswordAfterReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PasswordChangeAfterReset'
      responses:
        200:
          description: OK
      summary: Change your password from an email / token based reset.
  /user/mark_all_as_read:
    post:
      tags:
        - User
      operationId: markAllAsRead
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetRepliesResponse'
      summary: Mark all replies as read.
  /user/save_user_settings:
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/SaveUserSettings'
      responses:
        200:
          description: OK
      summary: Save your user settings.
  /user/change_password:
    put:
      tags:
        - User
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ChangePassword'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/LoginResponse'
      summary: Change your user password.
  /user/report_count:
    get:
      tags:
        - User
      parameters:
        - in: query
          name: GetReportCount
          explode: true
          schema:
            $ref: "components.yaml#/components/schemas/GetReportCount"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetReportCountResponse'
      summary: Get counts for your reports
  /user/unread_count:
    get:
      tags:
        - User
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetUnreadCountResponse'
      summary: Get your unread counts
  /user/verify_email:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/VerifyEmail'
      responses:
        200:
          description: Ok
      summary: Verify your email

  /user/leave_admin:
    post:
      tags:
        - User
        - Admin
      operationId: leaveAdmin
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetSiteResponse'
      summary: Leave the Site admins.
  /user/donation_dialog_shown:
    post:
      tags:
        - User
      operationId: markDonationDialogShown
      responses:
        200:
          description: Ok
      summary: Mark donation dialog as shown.
  /admin/add:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/AddAdmin'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/AddAdminResponse'
      summary: Add an admin to your site.
  /admin/registration_application/count:
    get:
      tags:
        - Admin
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetUnreadRegistrationApplicationCountResponse'
      summary: Get the unread registration applications count.
  /admin/registration_application/list:
    get:
      tags:
        - Admin
      parameters:
        - in: query
          explode: true
          name: ListRegistrationApplications
          schema:
            $ref: 'components.yaml#/components/schemas/ListRegistrationApplications'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListRegistrationApplicationsResponse'
      summary: List the registration applications.
  /admin/registration_application/approve:
    put:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ApproveRegistrationApplication'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/RegistrationApplicationResponse'
      summary: Approve a registration application
  /admin/purge/person:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PurgePerson'
      responses:
        200:
          description: Ok
      summary: Purge / Delete a person from the database.
  /admin/purge/community:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PurgeCommunity'
      responses:
        200:
          description: Ok
      summary: Purge / Delete a community from the database.
  /admin/purge/post:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PurgePost'
      responses:
        200:
          description: Ok
      summary: Purge / Delete a post from the database.
  /admin/purge/comment:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/PurgeComment'
      responses:
        200:
          description: Ok
      summary: Purge / Delete a comment from the database.
  /custom_emoji:
    put:
      tags:
        - CustomEmoji
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditCustomEmoji'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CustomEmojiResponse'
      summary: Edit an existing custom emoji
    post:
      tags:
        - CustomEmoji
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCustomEmoji'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CustomEmojiResponse'
      summary: Create a new custom emoji

  /custom_emoji/delete:
    post:
      tags:
        - CustomEmoji
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteCustomEmoji'
      responses:
        200:
          description: OK
      summary: Delete a custom emoji
  /site/block:
    post:
      tags:
        - Site
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BlockInstance'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BlockInstanceResponse'
      summary: Block an instance.
  /user/totp/generate:
    post:
      tags: [ User ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GenerateTotpSecretResponse'
      summary: "Generate a TOTP / two-factor secret.\r\r Afterwards you need to call
        `/user/totp/update` with a valid token to enable it."
  /user/totp/update:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/UpdateTotp'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/UpdateTotpResponse'
      summary: "Enable / Disable TOTP / two-factor authentication.\r\r To enable, you
        need to first call `/user/totp/generate` and then pass a valid token to
        this.\r\r Disabling is only possible if 2FA was previously enabled.
        Again it is necessary to pass a valid token."
  /user/export_settings:
    get:
      tags:
        - User
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportUserSettingsResponse'
      summary: "Export a backup of your user settings, including your saved content,\r
        followed communities, and blocks."
  /user/import_settings:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportUserSettings'
      responses:
        200:
          description: OK
      summary: 'Import a backup of your user settings.'
  /user/list_logins:
    get:
      tags:
        - User
      operationId: listLogins
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components.yaml#/components/schemas/LoginToken'
      summary: 'List login tokens for your user'
  /user/validate_auth:
    get:
      tags:
        - User
      operationId: validateAuth
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
      summary: Returns an error message if your auth token is invalid
  /user/logout:
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - User
      operationId: logout
      responses:
        200:
          description: OK
      summary: 'Invalidate the currently used auth token.'
  /post/like/list:
    get:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ListPostLikes'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListPostLikesResponse'
      summary: 'List a post''s likes. Admin-only.'
  /comment/like/list:
    get:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ListCommentLikes'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListCommentLikesResponse'
      summary: 'List a comment''s likes. Admin-only.'
  /account/list_media:
    get:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ListMedia'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListMediaResponse'
      summary: List all the media for your user
  /admin/list_all_media:
    get:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ListMedia'
      operationId: listAllMedia
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListMediaResponse'
      summary: 'List all the media known to your instance.'
  /post/hide:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/HidePost'
      responses:
        200:
          description: OK
      summary: Hide a post from list views.
  /admin/registration_application:
    get:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/GetRegistrationApplication'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/RegistrationApplicationResponse'
      summary: Get the application a user submitted when they first registered their
        account
